(function() {
  var Anchor, Box, Cone, Cylinder, Ellipse, Group, Hemisphere, Polygon, Rect, RoundedRect, Shape, TAU, animate, bangs, bangsAnchor, body, braid, braid3, braidChop, braidChop2, braidChop3, braidChop4, braidShape, braids, cotton, cottonAnchor, cottonsAnchor, ear, earGroup, earGroupRight, eye, eyeAnchor, eyeAnchorRight, eyeGroup, hair, head, headAnchor, horn, hornGroup, hornGroupRight, i, illo, iris, isSpinning, j, k, l, leg, legGroup, len, len1, len2, m, mouth, n, nose, o, p, philtrum, pkm, pupil, q, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, u;

  ({TAU, Anchor, Group, Rect, RoundedRect, Ellipse, Polygon, Shape, Hemisphere, Cone, Cylinder, Box} = Zdog);

  isSpinning = true;

  illo = new Zdog.Illustration({
    element: "#canvas",
    dragRotate: true,
    rotate: {
      y: TAU / 16,
      x: -TAU / 16
    },
    resize: "fullscreen",
    onDragStart: function() {
      isSpinning = false;
    },
    onResize: function() {
      var zoom;
      zoom = (Math.min(innerWidth, innerHeight)) / 30;
      this.zoom = zoom < 10 && 10 || zoom;
    }
  });

  pkm = new Anchor({
    addTo: illo
  });

  body = new Shape({
    addTo: pkm,
    stroke: 12,
    color: "#fff"
  });

  cottonsAnchor = new Anchor({
    addTo: body
  });

  headAnchor = new Anchor({
    addTo: cottonsAnchor,
    translate: {
      z: 8,
      y: -2
    }
  });

  head = new Cone({
    addTo: headAnchor,
    rotate: {
      x: -TAU / 32
    },
    stroke: 5,
    color: "#544"
  });

  hair = new Hemisphere({
    addTo: head,
    diameter: 6,
    translate: {
      y: -2,
      z: -3
    },
    rotate: {
      x: TAU / 4
    },
    color: "#fff"
  });

  bangsAnchor = new Anchor({
    addTo: hair,
    rotate: {
      z: TAU / 24
    }
  });

  bangs = new Shape({
    addTo: bangsAnchor,
    stroke: 3,
    translate: {
      y: 3.5,
      z: .5
    },
    color: "#fff"
  });

  bangsAnchor.copyGraph({
    rotate: {
      z: TAU / 8
    }
  });

  bangsAnchor.copyGraph({
    rotate: {
      z: -TAU / 8
    }
  });

  bangsAnchor.copyGraph({
    rotate: {
      z: -TAU / 24
    }
  });

  braids = [{}, {}];

  ref = [1, -1];
  for (i = k = 0, len = ref.length; k < len; i = ++k) {
    u = ref[i];
    braid = braids[i];
    braid.above = new Group({
      addTo: head,
      translate: {
        x: -3.5 * u,
        y: -2
      },
      rotate: {
        x: TAU / 32
      }
    });
    braidShape = new Cone({
      addTo: braid.above,
      diameter: 1.5,
      length: 1.5,
      translate: {
        y: 2
      },
      rotate: {
        x: TAU / 4
      },
      color: "#bbb"
    });
    braidShape.copy({
      rotate: {
        x: -TAU / 4
      }
    });
    braid.mid = new Anchor({
      addTo: braid.above,
      translate: {
        y: 3
      }
    });
    braidShape.copy({
      addTo: braid.mid
    });
    braidShape.copy({
      addTo: braid.mid,
      rotate: {
        x: -TAU / 4
      }
    });
    braid.under = new Anchor({
      addTo: braid.mid,
      translate: {
        y: 3
      }
    });
    braid3 = braidShape.copy({
      addTo: braid.under,
      diameter: 2.5,
      length: 2.5
    });
    braidChop = braidShape.copy({
      addTo: braid.under,
      length: 1.5,
      rotate: {
        x: -TAU / 4
      },
      stroke: .5
    });
    braidChop2 = braidChop.copy();
    braidChop2.translate.x = -.75;
    braidChop2.rotate.y = TAU / 16;
    braidChop3 = braidChop.copy();
    braidChop3.translate.z = .57;
    braidChop3.rotate.z = TAU / 16;
    braidChop4 = braidChop.copy();
    braidChop4.translate.z = -.75;
    braidChop4.rotate.z = -TAU / 16;
    braidChop.translate.x = .75;
    braidChop.rotate.y = -TAU / 16;
  }

  eyeAnchor = new Anchor({
    addTo: head,
    rotate: {
      y: TAU / 8
    }
  });

  eyeGroup = new Group({
    addTo: eyeAnchor,
    translate: {
      z: 3
    }
  });

  eye = new Ellipse({
    addTo: eyeGroup,
    width: 1.75,
    height: 2.25,
    stroke: false,
    fill: true,
    color: "#eda"
  });

  iris = new Ellipse({
    addTo: eye,
    width: 1.25,
    height: 1.75,
    stroke: false,
    fill: true,
    color: "#222"
  });

  pupil = new Ellipse({
    addTo: iris,
    width: 1,
    height: .5,
    stroke: false,
    fill: true,
    color: "#fff"
  });

  eyeAnchorRight = eyeAnchor.copyGraph({
    rotate: {
      y: -TAU / 7
    }
  });

  nose = new Shape({
    addTo: head,
    path: [
      {
        x: -.25
      },
      {
        x: 0,
        y: .1
      },
      {
        x: .25
      }
    ],
    closed: false,
    translate: {
      y: .5,
      z: 3.45
    },
    stroke: .35,
    color: "#eab"
  });

  philtrum = new Shape({
    addTo: nose,
    path: [
      {
        y: .1
      },
      {
        y: .6,
        z: -.25
      }
    ],
    stroke: .15,
    color: "#eab"
  });

  mouth = new Shape({
    addTo: head,
    path: [
      {
        z: -.1
      },
      {
        arc: [
          {
            x: -.5,
            y: .75,
            z: -.5
          },
          {
            x: -1,
            y: .25,
            z: -.6
          }
        ]
      }
    ],
    closed: false,
    translate: {
      y: 1.25,
      z: 3.15
    },
    stroke: .15,
    color: "#222"
  });

  mouth.copy({
    scale: {
      x: -1
    }
  });

  earGroup = new Group({
    addTo: head,
    translate: {
      x: -3,
      y: -.5,
      z: -1.5
    }
  });

  ear = new Box({
    addTo: earGroup,
    width: 2,
    height: .75,
    translate: {
      x: -1,
      z: -.5
    },
    rotate: {
      z: TAU / 2
    },
    color: "#544",
    topFace: "#eab",
    bottomFace: "#544"
  });

  earGroupRight = earGroup.copyGraph({
    scale: {
      x: -1
    }
  });

  earGroupRight.translate.x *= -1;

  hornGroup = new Group({
    addTo: head,
    translate: {
      x: -1.75,
      y: -3.75
    }
  });

  horn = new Cone({
    addTo: hornGroup,
    rotate: {
      x: TAU / 4
    },
    stroke: .3,
    color: "#866"
  });

  hornGroupRight = hornGroup.copyGraph();

  hornGroupRight.translate.x *= -1;

  for (i = l = 0, ref1 = TAU, ref2 = TAU / 10; ref2 !== 0 && (ref2 > 0 ? l < ref1 : l > ref1); i = l += ref2) {
    cottonAnchor = new Anchor({
      addTo: cottonsAnchor,
      rotate: {
        y: i
      }
    });
    cotton = new Shape({
      addTo: cottonAnchor,
      translate: {
        z: 6
      },
      stroke: 4,
      color: "#fff"
    });
    if (!i) {
      cottonAnchor.translate = {
        y: 2
      };
    }
  }

  for (i = m = 0, ref3 = TAU, ref4 = TAU / 9; ref4 !== 0 && (ref4 > 0 ? m < ref3 : m > ref3); i = m += ref4) {
    ref5 = [-1, 1];
    for (o = 0, len1 = ref5.length; o < len1; o++) {
      j = ref5[o];
      cottonAnchor = new Anchor({
        addTo: cottonsAnchor,
        rotate: {
          y: i
        }
      });
      cotton = new Shape({
        addTo: cottonAnchor,
        translate: {
          y: 3.5 * j,
          z: 5
        },
        stroke: 4,
        color: "#fff"
      });
    }
  }

  for (i = p = 0, ref6 = TAU, ref7 = TAU / 3; ref7 !== 0 && (ref7 > 0 ? p < ref6 : p > ref6); i = p += ref7) {
    ref8 = [-1, 1];
    for (q = 0, len2 = ref8.length; q < len2; q++) {
      j = ref8[q];
      cottonAnchor = new Anchor({
        addTo: cottonsAnchor,
        rotate: {
          y: i + TAU / 6
        }
      });
      cotton = new Shape({
        addTo: cottonAnchor,
        translate: {
          y: 5.5 * j,
          z: 2
        },
        stroke: 4,
        color: "#fff"
      });
    }
  }

  legGroup = new Group({
    addTo: body,
    translate: {
      x: -2.5,
      y: 3.5,
      z: 3
    }
  });

  leg = new Cylinder({
    addTo: legGroup,
    length: 3,
    translate: {
      y: 3
    },
    rotate: {
      x: -TAU / 4
    },
    color: "#544",
    frontFace: "#866"
  });

  legGroup.copyGraph({
    translate: {
      x: 2.5,
      y: 3.5,
      z: 3
    }
  });

  legGroup.copyGraph({
    translate: {
      x: -2.5,
      y: 3.5,
      z: -3
    }
  });

  legGroup.copyGraph({
    translate: {
      x: 2.5,
      y: 3.5,
      z: -3
    }
  });

  n = 0;

  (animate = function() {
    var len3, r, ref9;
    ref9 = [1, -1];
    for (i = r = 0, len3 = ref9.length; r < len3; i = ++r) {
      u = ref9[i];
      braid = braids[i];
      braid.above.rotate.z = Math.sin(n / 32) / 8 + Math.sin(TAU / 32) * u;
      braid.mid.rotate.z = Math.sin(n / 32) / 8;
      braid.under.rotate.z = Math.sin(n / 32) / 6;
    }
    earGroup.rotate.z = -Math.sin(n / 16) / 6 - TAU / 16;
    earGroupRight.rotate.z = Math.sin(n / 16) / 6 + TAU / 16;
    headAnchor.rotate.y = headAnchor.rotate.z = Math.sin(n / 32 + 8) / 8;
    eyeAnchorRight.scale.y = eyeAnchor.scale.y = n % 240 < 10 ? 0 : 1;
    cottonsAnchor.translate.y = Math.sin(n / 16) / 16;
    if (isSpinning) {
      illo.rotate.y += TAU / 1024;
    }
    illo.updateRenderGraph();
    n++;
    requestAnimationFrame(animate);
  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=coffeescript